*viewdoc.txt*	Flexible viewer for any documentation (help/man/perldoc/etc.)

Author: Alex Efros <powerman-asdf@ya.ru>

For Vim version 7.0 or later.
This plugin only works if 'compatible' is not set.

Contents:
    Description			|viewdoc|
    Mappings	    		|viewdoc-mappings|
    Commands			|viewdoc-commands|
    Settings	    		|viewdoc-settings|
    Functions	    		|viewdoc-functions|
    Handlers	    		|viewdoc-handlers|
	DEFAULT			|ViewDoc_DEFAULT|
	man			|ViewDoc_man|
	help			|ViewDoc_help|
	help_custom		|ViewDoc_help_custom|
	perldoc			|ViewDoc_perldoc|
	pydoc			|ViewDoc_pydoc|
    Source and issue tracker	|viewdoc-source|
    License			|viewdoc-license|

==============================================================================
DESCRIPTION					*viewdoc*

Flexible viewer for any documentation source (help/man/perldoc/etc.) for any
file type inside Vim in easy to use, consistent, smart and configurable way.

 * You can configure how (keys/commands) documentation will be open.
   By default it will replace standard mapping for key <K> and command |:help|
   plus add mapping for <F1> key and new commands |:man|, |:doc|, etc.

 * You can configure where (buffer/window/tab) documentation will be open.
   Can open new docs in one dedicated (<K>) or new (<F1>) buffer/window/tab. 
   Support all work styles:

   - full screen (no tabs, one window, open files/docs are in hidden buffers), 
   - windowed (no tabs, many windows with open files/docs), 
   - tabbed full screen (many tabs, each with one window, open files/docs are
     in different tabs), 
   - tabbed (many tabs with many windows inside tabs). 

 * You can easily navigate to next/previous topic while viewing documentation
   using <C-]> and <C-T> (or alternative keys <CR> and <BS>), just
   like you use tags for navigation within source code and Vim's help.

 * Even closing documentation buffer/window/tab is easier, smarter and more
   configurable than ever before. :)

 * Smart detection of documentation source and topic when opening
   documentation for <cword> (word under cursor) - can use current syntax
   highlight (to find topic's context) and surrounding text (when topic
   doesn't include important special symbols because of 'iskeyword' value).

 * Smart completion for available documentation topics when opening
   documentation using command (just like Vim's |:help| command works).
   (Some documentation sources may not support this.)

 * Supported documentation sources:

   - Vim's help
   - custom documentation in vim help format
   - man pages
   - perldoc
   - pydoc

 * Support for new documentation sources and file types can be easily added by
   external plugins or within ~/.vimrc file.

 * You can have several documentation sources for same file type, and choose
   which one should be used on-the-fly.

 * Can be used as console man page viewer instead of /usr/bin/man.

Tested only in Linux, but should work in any *NIX.

==============================================================================
MAPPINGS					*viewdoc-mappings*

Global:~

<F1>	Open doc for <cword> (word under cursor) in new [Scratch] buffer.
	To disable use |g:no_viewdoc_maps|.

K	Open doc for <cword> in existing [Doc] buffer, replacing it current
	contents (will create [Doc] buffer if it doesn't exists yet).
	To disable use |g:no_viewdoc_maps|.

Local to buffer with documentation:~

q	Close this buffer/window/tab, |:quit| from Vim if it was the last one.

<C-]> or <CR>
	Open documentation for <cword> in same buffer.

<C-T> or <BS>
	Return to previous documentation in same buffer (after using <C-]>).

==============================================================================
COMMANDS					*viewdoc-commands*

General:~

:doc[!] {topic} [{filetype}]			*:doc*	    *:doc!*
:doc[!] <cword> [{filetype}]
	Abbrev for |:ViewDoc|.
	To disable use |g:no_viewdoc_abbrev|.

:ViewDoc[!] {topic} [{filetype}]		*:ViewDoc*
:ViewDoc[!] <cword> [{filetype}]
	Show documentation for word {topic} or for word under cursor (type
	<cword> literally as is, not as "<cword>" or as expand("<cword>")).

	Without {filetype} will use 'ft' of current buffer to detect which
	one of |viewdoc-handlers| (man/help/perldoc/etc.) should be used to
	show documentation for {topic}/<cword>.

	When used with <cword> handler may use smart detection of context
	when needed - check syntax highlight used for word under cursor or
	surrounding text (which wasn't included in expand("<cword>") because
	of 'iskeyword' value).

	By default will open documentation in new [Scratch] buffer, but when
	[!] is added will open doc in existing [Doc] buffer (will create it if
	not exists yet). Will this buffer open in current window, new window
	or new tab depends on |viewdoc-settings|.

	Examples: >
	    :doc substr perl
	    :doc! <cword>	" same as pressing <K>

Added by man handler:~

:man[!] {sect} {topic}				*:man*
:man[!] {topic}({sect})
:man[!] {topic}
:man[!] {sect} <cword>
:man[!] <cword>
	Abbrev for |:ViewDocMan|.
	To disable use |g:no_viewdoc_abbrev|.

:ViewDocMan[!] {sect} {topic}			*:ViewDocMan*
:ViewDocMan[!] {topic}({sect})
:ViewDocMan[!] {topic}
:ViewDocMan[!] {sect} <cword>
:ViewDocMan[!] <cword>
	Show man page for given {topic} and (optional) {sect}.

	Works in same way as |:ViewDoc| with {filetype}=man, plus:
	* support {sect} as separate first param
	* provide auto-complete for {topic} and ({sect}): >
	    :man tim<Tab>	" auto-complete {topic}
	    :man 2 tim<Tab>	" auto-complete {topic} for section 2 only
	    :man time(<Tab>	" auto-complete {sect}

Added by help handler:~

:help[!] {topic}
:help[!] <cword>
	Abbrev for |:ViewDocHelp|.
	To disable use |g:no_viewdoc_abbrev|.

:ViewDocHelp[!] {topic}				*:ViewDocHelp*
:ViewDocHelp[!] <cword>
	Show Vim help for given {topic}.

	Works in same way as |:ViewDoc| with {filetype}=help, plus:
	* provide same auto-complete and other behaviour as standard |:help|,
	  so it can be used as drop-in replacement

==============================================================================
SETTINGS					*viewdoc-settings*

						*g:viewdoc_open*
You can control where documentation will be opened by choosing command used
to open new window/tab: >

    let g:viewdoc_open='tabnew'
    let g:viewdoc_open='topleft new'
    let g:viewdoc_open='belowright vnew'

You can use any similar commands supported by Vim. Default is "tabnew".

						*g:viewdoc_only*
Next, if you open documentation in window (|g:viewdoc_open|!="tabnew"),
you can force this window to be "only" window in current tab: >

    let g:viewdoc_only=1

Default is 0.

						*g:viewdoc_prevtabonclose*
If you open documentation in new tab (|g:viewdoc_open|=="tabnew"), then when
you close that tab Vim by default will move to next tab. To move to previous
tab instead: >

    let g:viewdoc_prevtabonclose=1

Default is 1.

						*g:viewdoc_man_cmd*
Added by |ViewDoc_man| handler, should contain command to run `man`. You may
wanna change it, for ex. to force English manuals: >

    let g:viewdoc_man_cmd='LANG= /usr/bin/man'
<
Default is '/usr/bin/man'.

g:no_viewdoc_abbrev				*g:no_viewdoc_abbrev* 
g:no_plugin_abbrev
	Set any of these variables to disable abbrev |:help|,
	|:man|, |:doc|.

g:no_viewdoc_maps				*g:no_viewdoc_maps* 
g:no_plugin_maps
	Set any of these variables to disable mapping <K>, <F1>.

==============================================================================
FUNCTIONS					*viewdoc-functions*

						*ViewDoc()*
>
    :call ViewDoc('new', '<cword>')
    :call ViewDoc('new', 'topic')
    :call ViewDoc('doc', 'topic', 'filetype')

Using "new" in first param is same as run |:doc|, using "doc" is same as |:doc!|.

==============================================================================
HANDLERS					*viewdoc-handlers*

To add documentation handler for new {filetype} it's should to create one
function in ~/.vimrc or separate plugin: >

    ViewDoc_{filetime}(topic, filetype, synid, have_context)
<
That function will get 4 parameters:

 * topic	    which documentation needed

 * filetype	    usually same as {filetype}, unless you're using same
		    function for many {filetype}

 * synid	    syntax id as returned by synID() if we've context or 0 if
		    we don't have context

 * have_context	    true if we've context (and so can check syntax name for
		    requested topic or even surrounding text); will be true
		    only when |:ViewDoc| / |ViewDoc()| / |:ViewDocMan| / etc.
		    called with <cword> instead of static {topic}

It should return Dictionary with these keys (all optional): >

    {
      'topic':		'query',
      'ft':		'perldoc',
      'cmd':		'cat /path/to/file',
      'line':		1,
      'col':		1,
      'tags':		'/path/to/tags',
      'docft':		'perl',
    }
<
For example, here is implementation of |ViewDoc_pydoc| handler: >

    function g:ViewDoc_pydoc(topic, ...)
	    return  { 'cmd':	printf('pydoc %s', shellescape(a:topic,1)),
		    \ 'ft':	'pydoc',
		    \ }
    endfunction
    let g:ViewDoc_python = function('g:ViewDoc_pydoc')
<

------------------------------------------------------------------------------
Handler: DEFAULT				*ViewDoc_DEFAULT*

If there is no handler for current filetype |ViewDoc_man| handler will be used.
To change default handler to, for ex., |ViewDoc_help| - add to ~/.vimrc: >

    autocmd VimEnter * let g:ViewDoc_DEFAULT = function('g:ViewDoc_help')
<

------------------------------------------------------------------------------
Handler: man					*ViewDoc_man*

Show doc using `man` command when {filetype} is "sh" or "man".
Also used as default handler, see |ViewDoc_DEFAULT|.

Add commands |:man| and |:ViewDocMan|.
Add setting |g:viewdoc_man_cmd|.

To view man pages in Vim from console add this to ~/.bashrc: >

    function man() { vim -c "ViewDocMan $*" -c tabonly; }

------------------------------------------------------------------------------
Handler: help					*ViewDoc_help*

Show standard Vim help when {filetype} is "vim" or "help".

Viewing Vim help using this plugin have advantage in better control how and
where help window will be opened (and, of course, in closing help with <q>).

Add commands |:help| and |:ViewDocHelp| (behaviour of these commands is
exactly same as for standard Vim |:help| command).

------------------------------------------------------------------------------
Handler: help_custom				*ViewDoc_help_custom*

Show doc for any {filetype} using separate .txt files written in Vim help
format and stored in directory ~/.vim/doc/{filetype}/

Examples of external docs which can be used with this handler:

 * CSS 2.1, from http://www.vim.org/scripts/script.php?script_id=918
    Unpack file to ~/.vim/doc/css/css21.txt and add to ~/.vimrc: >

    autocmd VimEnter * let g:ViewDoc_css = function('g:ViewDoc_help_custom')
<
 * CMake, from http://www.vim.org/scripts/script.php?script_id=3045
    Unpack files to ~/.vim/doc/cmake/*.txt and add to ~/.vimrc: >

    autocmd VimEnter * let g:ViewDoc_cmake = function('g:ViewDoc_help_custom')
<
Of course, you should run helptags on these directories after unpacking files: >

    :helptags ~/.vim/doc/css/
    :helptags ~/.vim/doc/cmake/
<

------------------------------------------------------------------------------
Handler: perldoc				*ViewDoc_perldoc*

Show doc using `perldoc` command when {filetype} is "perl" or "perldoc".

------------------------------------------------------------------------------
Handler: pydoc					*ViewDoc_pydoc*

Show doc using `pydoc` command when {filetype} is "python" or "pydoc".

==============================================================================
SOURCE AND ISSUE TRACKER			*viewdoc-source*

https://code.google.com/p/vim-plugin-viewdoc/

==============================================================================
LICENSE						*viewdoc-license*

Public Domain.

